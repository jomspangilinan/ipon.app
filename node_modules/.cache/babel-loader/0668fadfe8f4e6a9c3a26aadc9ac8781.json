{"ast":null,"code":"import moment from \"moment\";\nexport const eachExpense = expenses => {\n  return Object.keys(expenses).map(function (key) {\n    return {\n      key: key,\n      value: expenses[key]\n    };\n  }).sort(function (a, b) {\n    // Turn your strings into dates, and then subtract them\n    // to get a value that is either negative, positive, or zero.\n    return new Date(b.value.date) - new Date(a.value.date);\n  });\n};\nexport const currentUsersExpenses = (eachExpense, currentUser) => {\n  return eachExpense.filter(elem => elem.value.user_id === currentUser.uid);\n}; // expenses in selected month and year\n\nexport const expensesinMonthAndYear = (eachExpense, currentUser, selectedMonth, selectedYear) => {\n  return eachExpense.filter(elem => elem.value.uid === currentUser.uid).filter(elem => new Date(elem.value.date).getFullYear().toString() === selectedYear.toString()).filter(elem => new Date(elem.value.date).getMonth().toString() === selectedMonth);\n}; // expenses in selected year\n\nexport const expensesinSelectedYear = (eachExpense, currentUser, selectedYear) => {\n  return eachExpense.filter(elem => elem.value.uid === currentUser.uid).filter(elem => new Date(elem.value.date).getFullYear().toString() === selectedYear.toString());\n}; // expenses in a selected date\n\nexport const expensesInDate = (eachExpense, currentUser, date) => {\n  return eachExpense.filter(elem => elem.value.user_id === currentUser.uid && elem.value.date === date);\n};\nexport const ExpensesInDate = (eachExpense, currentUser, date) => {\n  return eachExpense.filter(elem => elem.value.user_id === currentUser.uid && elem.value.date === date && elem.value.type === 'expense');\n};\n_c = ExpensesInDate;\nexport const IncomeInDate = (eachExpense, currentUser, date) => {\n  return eachExpense.filter(elem => elem.value.user_id === currentUser.uid && elem.value.date === date && elem.value.type === 'income');\n};\n_c2 = IncomeInDate;\nexport const AllExpensesInAWeek = (eachExpense, currentUser, date) => {\n  let expensesInAWeek = []; // (expenses.map(elem => Number(\n  //     elem.value.type === 'income' ? \n  //             parseFloat(elem.value.price) + totalMoney\n  //             : totalMoney - parseFloat(elem.value.price)\n  //     )).reduce((prev, cur) => prev + cur)\n\n  Object.keys(date).map(id => expensesInAWeek.push(ExpensesInDate(eachExpense, currentUser, date[id]).filter(el => el.value != null)));\n  console.log(expensesInAWeek);\n  return expensesInAWeek;\n}; // expenses in current month\n\n_c3 = AllExpensesInAWeek;\nexport const currentMonthExpenses = (eachExpense, currentUser) => {\n  return eachExpense.filter(elem => elem.value.uid === currentUser.uid && new Date(elem.value.date).getMonth() === new Date().getMonth() && new Date(elem.value.date).getFullYear() === new Date().getFullYear());\n}; // expense in current year\n\nexport const expensesinCurrentYear = (eachExpense, currentUser) => {\n  return eachExpense.filter(elem => elem.value.uid === currentUser.uid).filter(elem => new Date(elem.value.date).getFullYear().toString() === new Date().getFullYear().toString());\n}; // expenses in a particular month of this year\n\nexport const expensesinMonth = (eachExpense, currentUser, MonthNumber, selectedYear) => {\n  return eachExpense.filter(elem => elem.value.uid === currentUser.uid).filter(elem => new Date(elem.value.date).getFullYear().toString() === selectedYear.toString()).filter(elem => new Date(elem.value.date).getMonth().toString() === MonthNumber);\n}; // expense today\n\nexport const expensesToday = (eachExpense, currentUser) => {\n  return eachExpense.filter(elem => elem.value.user_id === currentUser.uid && new Date(elem.value.date).getMonth() === new Date().getMonth()).filter(elem => new Date(elem.value.date).getDate() === new Date().getDate());\n}; // expense this week\n\nexport const expensesThisWeek = (eachExpense, currentUser) => {\n  return eachExpense.filter(elem => elem.value.uid === currentUser.uid && moment(elem.value.date, \"MM/DD/YYYY\").week() === moment(moment(new Date()), \"MM/DD/YYYY\").week() && moment(elem.value.date, \"MM/DD/YYYY\").year() === moment(moment(new Date()), \"MM/DD/YYYY\").year());\n}; // expenses Total\n\nexport const totalExpense = expenses => {\n  if (expenses.length) {\n    let totalMoney = 0;\n    return expenses.map(elem => Number(elem.value.type === 'income' ? parseFloat(elem.value.price) + totalMoney : totalMoney - parseFloat(elem.value.price))).reduce((prev, cur) => prev + cur);\n  } else {\n    return 0;\n  }\n}; // most spend day\n\nexport const mostSpentDay = expenses => {\n  let monday = 0;\n  let tuesday = 0;\n  let wednesday = 0;\n  let thursday = 0;\n  let friday = 0;\n  let saturday = 0;\n  let sunday = 0;\n  expenses.map(elem => {\n    switch (elem.value.day.toString()) {\n      case \"0\":\n        sunday = sunday + 1;\n        return \"\";\n\n      case \"1\":\n        monday = monday + 1;\n        return \"\";\n\n      case \"2\":\n        tuesday = tuesday + 1;\n        return \"\";\n\n      case \"3\":\n        wednesday = wednesday + 1;\n        return \"\";\n\n      case \"4\":\n        thursday = thursday + 1;\n        return \"\";\n\n      case \"5\":\n        friday = friday + 1;\n        return \"\";\n\n      case \"6\":\n        saturday = saturday + 1;\n        return \"\";\n\n      default:\n        return \"\";\n    }\n  });\n  let mostDaysObj = {\n    sunday: sunday,\n    monday: monday,\n    tuesday: tuesday,\n    wednesday: wednesday,\n    thursday: thursday,\n    friday: friday,\n    saturday: saturday\n  };\n  var sortable = [];\n\n  for (var day in mostDaysObj) {\n    sortable.push([day, mostDaysObj[day]]);\n  }\n\n  let sortedCategories = sortable.sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  return {\n    mostSpentDay: expenses.length ? sortedCategories[0][0] : \"-\",\n    leastSpentDay: expenses.length ? sortedCategories[6][0] : \"-\"\n  };\n}; // Total expenses in Each month\n\nexport const totalExpensesInEachMonthOfThisYear = (expenses, eachExpense, currentUser, selectedYear) => {\n  let expensesOfAllMonthsInThisYear = [];\n\n  for (var i = 0; i <= 11; i++) {\n    expensesOfAllMonthsInThisYear.push(totalExpense(expensesinMonth(eachExpense, currentUser, String(i), selectedYear)));\n  }\n\n  return expensesOfAllMonthsInThisYear;\n}; // Total for each category\n\nexport const calculateTotalForAllCategories = expenses => {\n  const categories = [\"Food\", \"Automobile\", \"Entertainment\", \"Clothing\", \"Healthcare\", \"Travel\", \"Shopping\", \"Personal Care\", \"Investment\", \"Gifts & Donations\", \"Bills & Utilities\", \"Others\"];\n  let categoryTotal = {\n    Food: 0,\n    Automobile: 0,\n    Entertainment: 0,\n    Clothing: 0,\n    Healthcare: 0,\n    Travel: 0,\n    Shopping: 0,\n    \"Personal Care\": 0,\n    Investment: 0,\n    \"Gifts & Donations\": 0,\n    \"Bills & Utilities\": 0,\n    Others: 0\n  };\n\n  const totalForACategory = function (expenses, category) {\n    let temp = expenses.filter(elem => elem.value.category === category).map(el => Number(el.value.expense));\n    var category = category;\n\n    if (temp.length) {\n      return categoryTotal[category] = temp.reduce((prev, cur) => prev + cur);\n    } else {\n      return categoryTotal[category] = 0;\n    }\n  };\n\n  categories.map(category => totalForACategory(expenses, category));\n  console.log(\"category total\", categoryTotal);\n  return categoryTotal;\n}; // most spent on category\n\nexport const mostSpentCategory = expenses => {\n  let categoryTotals = calculateTotalForAllCategories(expenses);\n  var sortable = [];\n\n  for (var cat in categoryTotals) {\n    sortable.push([cat, categoryTotals[cat]]);\n  }\n\n  let sortedCategories = sortable.sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  return expenses.length ? sortedCategories[0][0] : \"-\";\n}; // all categories\n\nexport const categories = [\"Food\", \"Automobile\", \"Entertainment\", \"Clothing\", \"Healthcare\", \"Travel\", \"Shopping\", \"Personal Care\", \"Investment\", \"Gifts & Donations\", \"Bills & Utilities\", \"Others\"]; // colors for each category\n\nexport const categoryColors = [\"#FF965D\", \"#FFCC78\", \"#A08E78\", \"#8DA685\", \"#00A3EA\", \"#3EA75E\", \"#16B498\", \"#FF1945\", \"#FF5473\", \"#927959\", \"#7E0332\", \"#872AEF\"]; // retrun border color for each category - daily and monthly view\n\n/*\r\n@method : categoryName\r\n@params : \r\n    cat: category name\r\n    name: name of the component (Basically we're retrieving styles based on category here)\r\n@return : styles based on category for a particular component based on name \r\n*/\n\nexport const categoryName = (cat, name) => {\n  switch (cat) {\n    case \"Food\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #FF965D\"\n      } : {\n        borderLeft: \"10px solid #FF965D\"\n      };\n\n    case \"Automobile\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #FFCC78\"\n      } : {\n        borderLeft: \"10px solid #FFCC78\"\n      };\n\n    case \"Entertainment\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #A08E78\"\n      } : {\n        borderLeft: \"10px solid #A08E78\"\n      };\n\n    case \"Clothing\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #8DA685\"\n      } : {\n        borderLeft: \"10px solid #8DA685\"\n      };\n\n    case \"Healthcare\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #00A3EA\"\n      } : {\n        borderLeft: \"10px solid #00A3EA\"\n      };\n\n    case \"Travel\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #3EA75E\"\n      } : {\n        borderLeft: \"10px solid #3EA75E\"\n      };\n\n    case \"Shopping\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #16B498\"\n      } : {\n        borderLeft: \"10px solid #16B498\"\n      };\n\n    case \"Personal Care\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #FF1945\"\n      } : {\n        borderLeft: \"10px solid #FF1945\"\n      };\n\n    case \"Investment\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #FF5473\"\n      } : {\n        borderLeft: \"10px solid #FF5473\"\n      };\n\n    case \"Gifts & Donations\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #927959\"\n      } : {\n        borderLeft: \"10px solid #927959\"\n      };\n\n    case \"Bills & Utilities\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #7E0332\"\n      } : {\n        borderLeft: \"10px solid #7E0332\"\n      };\n\n    case \"Others\":\n      return name === \"card\" ? {\n        borderBottom: \"5px solid #872AEF\"\n      } : {\n        borderLeft: \"10px solid #872AEF\"\n      };\n\n    default:\n      return {\n        borderBottom: \"5px solid orange\"\n      };\n  }\n};\nexport const categoryIcon = category => {\n  switch (category) {\n    case \"Food\":\n      return \"cutlery\";\n\n    case \"Automobile\":\n      return \"motorcycle\";\n\n    case \"Entertainment\":\n      return \"film\";\n\n    case \"Clothing\":\n      return \"shopping-bag\";\n\n    case \"Healthcare\":\n      return \"medkit\";\n\n    case \"Travel\":\n      return \"plane\";\n\n    case \"Shopping\":\n      return \"shopping-cart\";\n\n    case \"Personal Care\":\n      return \"user-md\";\n\n    case \"Investment\":\n      return \"get-pocket\";\n\n    case \"Gifts & Donations\":\n      return \"gift\";\n\n    case \"Bills & Utilities\":\n      return \"columns\";\n\n    case \"Others\":\n      return \"circle-o\";\n\n    default:\n      return \"bars\";\n  }\n};\nexport const getCatColor = category => {\n  switch (category) {\n    case \"Food\":\n      return \"#FF965D\";\n\n    case \"Automobile\":\n      return \"#FFCC78\";\n\n    case \"Entertainment\":\n      return \"#A08E78\";\n\n    case \"Clothing\":\n      return \"#8DA685\";\n\n    case \"Healthcare\":\n      return \"#00A3EA\";\n\n    case \"Travel\":\n      return \"#3EA75E\";\n\n    case \"Shopping\":\n      return \"#16B498\";\n\n    case \"Personal Care\":\n      return \"#FF1945\";\n\n    case \"Investment\":\n      return \"#FF5473\";\n\n    case \"Gifts & Donations\":\n      return \"#927959\";\n\n    case \"Bills & Utilities\":\n      return \"#7E0332\";\n\n    case \"Others\":\n      return \"#872AEF\";\n\n    default:\n      return \"#fff\";\n  }\n};\nexport const setCurrencyIcon = currency => {\n  switch (currency) {\n    case \"Indian Rupees\":\n      return \"fa-rupee\";\n\n    case \"US Dollars\":\n      return \"fa-dollar\";\n\n    case \"Pounds\":\n      return \"fa-gbp\";\n\n    case \"Yen\":\n      return \"fa-yen\";\n\n    case \"Euro\":\n      return \"fa-euro\";\n\n    default:\n      return \"fa-rupee\";\n  }\n};\nexport const filterExpensesByCriteria = (startDate, endDate, category, expenseFrom, expenseTo, thisUsersExpenses) => {\n  var start = new Date(startDate);\n  var end = new Date(endDate);\n  var currentDate = new Date(start);\n  var between = [];\n  var filteredExpenses = [];\n\n  while (currentDate <= end) {\n    between.push(moment(new Date(currentDate)).format(\"MM/DD/YYYY\"));\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n\n  between.forEach(function (elem) {\n    return thisUsersExpenses.filter(function (el) {\n      return elem === el.value.date ? filteredExpenses.push(el) : \"\";\n    });\n  });\n  filteredExpenses = filteredExpenses.filter(elem => {\n    return elem.value.category === category;\n  }).filter(elem => {\n    return Number(elem.value.expense) >= Number(expenseFrom) && Number(elem.value.expense) <= Number(expenseTo);\n  });\n  return filteredExpenses;\n}; // Total loan amount that you need to pay or get paid\n\nexport const loanTakenOrGivenAmt = (thisUsersLoans, takenOrGiven) => {\n  if (thisUsersLoans.length && takenOrGiven) {\n    let loans = thisUsersLoans.filter(elem => elem.value.loanType === takenOrGiven && elem.value.status === \"Pending\");\n    return loans.length ? loans.map(elem => Number(elem.value.amount)).reduce((prev, cur) => prev + cur) : 0;\n  } else {\n    return 0;\n  }\n}; // get all the dates of a particular week\n\n/*const today = moment();\r\n        const sevenDaysBefore = moment().subtract(7, 'days');\r\n        console.log(today)\r\n        console.log(sevenDaysBefore)*/\n// get all the dates of a particular monthly\n\nexport const getAllTheDatesInAMonth = (selectedYear, selectedMonth) => {\n  //var date = new Date(), y = date.getFullYear(), m = date.getMonth();\n  var firstDay = new Date(Number(selectedYear), Number(selectedMonth), 1);\n  var lastDay = new Date(Number(selectedYear), Number(selectedMonth) + 1, 0);\n  firstDay = moment(firstDay).format(\"MM/DD/YYYY\");\n  lastDay = moment(lastDay).format(\"MM/DD/YYYY\"); // Returns an array of dates between the two dates\n\n  var getDates = function (startDate, endDate) {\n    var dates = [],\n        currentDate = startDate,\n        addDays = function (days) {\n      var date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    };\n\n    while (currentDate <= endDate) {\n      dates.push(currentDate);\n      currentDate = addDays.call(currentDate, 1);\n    }\n\n    return dates.map(date => moment(date).format(\"MM/DD/YYYY\"));\n  }; // Usage\n\n\n  var dates = getDates(new Date(firstDay), new Date(lastDay)); //var datesinSelectedMonth = [];\n  //dates.map(function (date) {\n  //datesinSelectedMonth.push(moment(date).format(\"MM/DD/YYYY\"));\n  //});\n\n  return dates;\n}; // previous 3 and next 3 years\n\nexport const yearsGenereator = () => {\n  var defaultYears = [];\n  var dateVal = new Date();\n  var currentYear = dateVal.getFullYear();\n  var cutOffYears = 4; // using 5 years as cutoff as per reports cutoffyears to keep inline\n\n  for (var i = currentYear - cutOffYears; i <= currentYear + cutOffYears; i++) {\n    defaultYears.push(i);\n  }\n\n  return defaultYears;\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ExpensesInDate\");\n$RefreshReg$(_c2, \"IncomeInDate\");\n$RefreshReg$(_c3, \"AllExpensesInAWeek\");","map":{"version":3,"sources":["D:/React Projects/my-app/src/Util.js"],"names":["moment","eachExpense","expenses","Object","keys","map","key","value","sort","a","b","Date","date","currentUsersExpenses","currentUser","filter","elem","user_id","uid","expensesinMonthAndYear","selectedMonth","selectedYear","getFullYear","toString","getMonth","expensesinSelectedYear","expensesInDate","ExpensesInDate","type","IncomeInDate","AllExpensesInAWeek","expensesInAWeek","id","push","el","console","log","currentMonthExpenses","expensesinCurrentYear","expensesinMonth","MonthNumber","expensesToday","getDate","expensesThisWeek","week","year","totalExpense","length","totalMoney","Number","parseFloat","price","reduce","prev","cur","mostSpentDay","monday","tuesday","wednesday","thursday","friday","saturday","sunday","day","mostDaysObj","sortable","sortedCategories","leastSpentDay","totalExpensesInEachMonthOfThisYear","expensesOfAllMonthsInThisYear","i","String","calculateTotalForAllCategories","categories","categoryTotal","Food","Automobile","Entertainment","Clothing","Healthcare","Travel","Shopping","Investment","Others","totalForACategory","category","temp","expense","mostSpentCategory","categoryTotals","cat","categoryColors","categoryName","name","borderBottom","borderLeft","categoryIcon","getCatColor","setCurrencyIcon","currency","filterExpensesByCriteria","startDate","endDate","expenseFrom","expenseTo","thisUsersExpenses","start","end","currentDate","between","filteredExpenses","format","setDate","forEach","loanTakenOrGivenAmt","thisUsersLoans","takenOrGiven","loans","loanType","status","amount","getAllTheDatesInAMonth","firstDay","lastDay","getDates","dates","addDays","days","valueOf","call","yearsGenereator","defaultYears","dateVal","currentYear","cutOffYears"],"mappings":"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","sourcesContent":["import moment from \"moment\";\r\n\r\nexport const eachExpense = expenses => {\r\n    return Object.keys(expenses)\r\n        .map(function (key) {\r\n            return { key: key, value: expenses[key] };\r\n        })\r\n        .sort(function (a, b) {\r\n            // Turn your strings into dates, and then subtract them\r\n            // to get a value that is either negative, positive, or zero.\r\n            return new Date(b.value.date) - new Date(a.value.date);\r\n        });\r\n};\r\n\r\nexport const currentUsersExpenses = (eachExpense, currentUser) => {\r\n    return eachExpense.filter(elem => elem.value.user_id === currentUser.uid);\r\n};\r\n\r\n// expenses in selected month and year\r\nexport const expensesinMonthAndYear = (eachExpense, currentUser, selectedMonth, selectedYear) => {\r\n    return eachExpense\r\n        .filter(elem => elem.value.uid === currentUser.uid)\r\n        .filter(elem => new Date(elem.value.date).getFullYear().toString() === selectedYear.toString())\r\n        .filter(elem => new Date(elem.value.date).getMonth().toString() === selectedMonth);\r\n};\r\n\r\n// expenses in selected year\r\nexport const expensesinSelectedYear = (eachExpense, currentUser, selectedYear) => {\r\n    return eachExpense\r\n        .filter(elem => elem.value.uid === currentUser.uid)\r\n        .filter(elem => new Date(elem.value.date).getFullYear().toString() === selectedYear.toString());\r\n};\r\n\r\n// expenses in a selected date\r\nexport const expensesInDate = (eachExpense, currentUser, date) => {\r\n    return eachExpense.filter(elem => elem.value.user_id === currentUser.uid && elem.value.date === date);\r\n};\r\n\r\nexport const ExpensesInDate = (eachExpense, currentUser, date) => {\r\n    return eachExpense.filter(elem => elem.value.user_id === currentUser.uid && elem.value.date === date && elem.value.type ==='expense');\r\n};\r\n\r\nexport const IncomeInDate = (eachExpense, currentUser, date) => {\r\n    return eachExpense.filter(elem => elem.value.user_id === currentUser.uid && elem.value.date === date && elem.value.type ==='income');\r\n};\r\n\r\n\r\nexport const AllExpensesInAWeek = (eachExpense, currentUser, date) => {\r\n\r\n    let expensesInAWeek = [];\r\n    // (expenses.map(elem => Number(\r\n    //     elem.value.type === 'income' ? \r\n    //             parseFloat(elem.value.price) + totalMoney\r\n    //             : totalMoney - parseFloat(elem.value.price)\r\n    //     )).reduce((prev, cur) => prev + cur)\r\n\r\n    \r\n    Object.keys(date).map((id) => (\r\n        expensesInAWeek.push(\r\n            ExpensesInDate(eachExpense, currentUser, date[id]).filter(el => el.value != null)\r\n        )\r\n    ))\r\n\r\n    console.log(expensesInAWeek);\r\n    return expensesInAWeek;\r\n};\r\n\r\n// expenses in current month\r\nexport const currentMonthExpenses = (eachExpense, currentUser) => {\r\n    return eachExpense.filter(\r\n        elem =>\r\n            elem.value.uid === currentUser.uid &&\r\n            new Date(elem.value.date).getMonth() === new Date().getMonth() &&\r\n            new Date(elem.value.date).getFullYear() === new Date().getFullYear()\r\n    );\r\n};\r\n\r\n// expense in current year\r\nexport const expensesinCurrentYear = (eachExpense, currentUser) => {\r\n    return eachExpense\r\n        .filter(elem => elem.value.uid === currentUser.uid)\r\n        .filter(elem => new Date(elem.value.date).getFullYear().toString() === new Date().getFullYear().toString());\r\n};\r\n\r\n// expenses in a particular month of this year\r\nexport const expensesinMonth = (eachExpense, currentUser, MonthNumber, selectedYear) => {\r\n    return eachExpense\r\n        .filter(elem => elem.value.uid === currentUser.uid)\r\n        .filter(elem => new Date(elem.value.date).getFullYear().toString() === selectedYear.toString())\r\n        .filter(elem => new Date(elem.value.date).getMonth().toString() === MonthNumber);\r\n};\r\n\r\n// expense today\r\nexport const expensesToday = (eachExpense, currentUser) => {\r\n    return eachExpense\r\n        .filter(\r\n            elem => elem.value.user_id === currentUser.uid && new Date(elem.value.date).getMonth() === new Date().getMonth()\r\n        )\r\n        .filter(elem => new Date(elem.value.date).getDate() === new Date().getDate());\r\n};\r\n\r\n// expense this week\r\nexport const expensesThisWeek = (eachExpense, currentUser) => {\r\n    return eachExpense.filter(\r\n        elem =>\r\n            elem.value.uid === currentUser.uid &&\r\n            moment(elem.value.date, \"MM/DD/YYYY\").week() === moment(moment(new Date()), \"MM/DD/YYYY\").week() &&\r\n            moment(elem.value.date, \"MM/DD/YYYY\").year() === moment(moment(new Date()), \"MM/DD/YYYY\").year()\r\n    );\r\n};\r\n\r\n// expenses Total\r\nexport const totalExpense = expenses => {\r\n    if (expenses.length) {\r\n        let totalMoney = 0;\r\n        return (expenses.map(elem => Number(\r\n            elem.value.type === 'income' ? \r\n                    parseFloat(elem.value.price) + totalMoney\r\n                    : totalMoney - parseFloat(elem.value.price)\r\n            )).reduce((prev, cur) => prev + cur)\r\n        \r\n        );\r\n    } else {\r\n        return 0;\r\n    }\r\n};\r\n\r\n// most spend day\r\nexport const mostSpentDay = expenses => {\r\n    let monday = 0;\r\n    let tuesday = 0;\r\n    let wednesday = 0;\r\n    let thursday = 0;\r\n    let friday = 0;\r\n    let saturday = 0;\r\n    let sunday = 0;\r\n\r\n    expenses.map(elem => {\r\n        switch (elem.value.day.toString()) {\r\n            case \"0\":\r\n                sunday = sunday + 1;\r\n                return \"\";\r\n            case \"1\":\r\n                monday = monday + 1;\r\n                return \"\";\r\n            case \"2\":\r\n                tuesday = tuesday + 1;\r\n                return \"\";\r\n            case \"3\":\r\n                wednesday = wednesday + 1;\r\n                return \"\";\r\n            case \"4\":\r\n                thursday = thursday + 1;\r\n                return \"\";\r\n            case \"5\":\r\n                friday = friday + 1;\r\n                return \"\";\r\n            case \"6\":\r\n                saturday = saturday + 1;\r\n                return \"\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    });\r\n\r\n    let mostDaysObj = {\r\n        sunday: sunday,\r\n        monday: monday,\r\n        tuesday: tuesday,\r\n        wednesday: wednesday,\r\n        thursday: thursday,\r\n        friday: friday,\r\n        saturday: saturday\r\n    };\r\n\r\n    var sortable = [];\r\n    for (var day in mostDaysObj) {\r\n        sortable.push([day, mostDaysObj[day]]);\r\n    }\r\n\r\n    let sortedCategories = sortable.sort(function (a, b) {\r\n        return b[1] - a[1];\r\n    });\r\n\r\n    return {\r\n        mostSpentDay: expenses.length ? sortedCategories[0][0] : \"-\",\r\n        leastSpentDay: expenses.length ? sortedCategories[6][0] : \"-\"\r\n    };\r\n};\r\n\r\n// Total expenses in Each month\r\nexport const totalExpensesInEachMonthOfThisYear = (expenses, eachExpense, currentUser, selectedYear) => {\r\n    let expensesOfAllMonthsInThisYear = [];\r\n\r\n    for (var i = 0; i <= 11; i++) {\r\n        expensesOfAllMonthsInThisYear.push(\r\n            totalExpense(expensesinMonth(eachExpense, currentUser, String(i), selectedYear))\r\n        );\r\n    }\r\n    return expensesOfAllMonthsInThisYear;\r\n};\r\n\r\n// Total for each category\r\nexport const calculateTotalForAllCategories = expenses => {\r\n    const categories = [\r\n        \"Food\",\r\n        \"Automobile\",\r\n        \"Entertainment\",\r\n        \"Clothing\",\r\n        \"Healthcare\",\r\n        \"Travel\",\r\n        \"Shopping\",\r\n        \"Personal Care\",\r\n        \"Investment\",\r\n        \"Gifts & Donations\",\r\n        \"Bills & Utilities\",\r\n        \"Others\"\r\n    ];\r\n\r\n    let categoryTotal = {\r\n        Food: 0,\r\n        Automobile: 0,\r\n        Entertainment: 0,\r\n        Clothing: 0,\r\n        Healthcare: 0,\r\n        Travel: 0,\r\n        Shopping: 0,\r\n        \"Personal Care\": 0,\r\n        Investment: 0,\r\n        \"Gifts & Donations\": 0,\r\n        \"Bills & Utilities\": 0,\r\n        Others: 0\r\n    };\r\n\r\n    const totalForACategory = function (expenses, category) {\r\n        let temp = expenses.filter(elem => elem.value.category === category).map(el => Number(el.value.expense));\r\n\r\n        var category = category;\r\n        if (temp.length) {\r\n            return (categoryTotal[category] = temp.reduce((prev, cur) => prev + cur));\r\n        } else {\r\n            return (categoryTotal[category] = 0);\r\n        }\r\n    };\r\n\r\n    categories.map(category => totalForACategory(expenses, category));\r\n\r\n    console.log(\"category total\", categoryTotal)\r\n\r\n    return categoryTotal;\r\n};\r\n\r\n// most spent on category\r\nexport const mostSpentCategory = expenses => {\r\n    let categoryTotals = calculateTotalForAllCategories(expenses);\r\n\r\n    var sortable = [];\r\n    for (var cat in categoryTotals) {\r\n        sortable.push([cat, categoryTotals[cat]]);\r\n    }\r\n\r\n    let sortedCategories = sortable.sort(function (a, b) {\r\n        return b[1] - a[1];\r\n    });\r\n\r\n    return expenses.length ? sortedCategories[0][0] : \"-\";\r\n};\r\n\r\n// all categories\r\nexport const categories = [\r\n    \"Food\",\r\n    \"Automobile\",\r\n    \"Entertainment\",\r\n    \"Clothing\",\r\n    \"Healthcare\",\r\n    \"Travel\",\r\n    \"Shopping\",\r\n    \"Personal Care\",\r\n    \"Investment\",\r\n    \"Gifts & Donations\",\r\n    \"Bills & Utilities\",\r\n    \"Others\"\r\n];\r\n\r\n// colors for each category\r\nexport const categoryColors = [\r\n    \"#FF965D\",\r\n    \"#FFCC78\",\r\n    \"#A08E78\",\r\n    \"#8DA685\",\r\n    \"#00A3EA\",\r\n    \"#3EA75E\",\r\n    \"#16B498\",\r\n    \"#FF1945\",\r\n    \"#FF5473\",\r\n    \"#927959\",\r\n    \"#7E0332\",\r\n    \"#872AEF\"\r\n];\r\n\r\n// retrun border color for each category - daily and monthly view\r\n/*\r\n@method : categoryName\r\n@params : \r\n    cat: category name\r\n    name: name of the component (Basically we're retrieving styles based on category here)\r\n@return : styles based on category for a particular component based on name \r\n*/\r\nexport const categoryName = (cat, name) => {\r\n    switch (cat) {\r\n        case \"Food\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #FF965D\" } : { borderLeft: \"10px solid #FF965D\" };\r\n        case \"Automobile\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #FFCC78\" } : { borderLeft: \"10px solid #FFCC78\" };\r\n        case \"Entertainment\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #A08E78\" } : { borderLeft: \"10px solid #A08E78\" };\r\n        case \"Clothing\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #8DA685\" } : { borderLeft: \"10px solid #8DA685\" };\r\n        case \"Healthcare\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #00A3EA\" } : { borderLeft: \"10px solid #00A3EA\" };\r\n        case \"Travel\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #3EA75E\" } : { borderLeft: \"10px solid #3EA75E\" };\r\n        case \"Shopping\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #16B498\" } : { borderLeft: \"10px solid #16B498\" };\r\n        case \"Personal Care\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #FF1945\" } : { borderLeft: \"10px solid #FF1945\" };\r\n        case \"Investment\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #FF5473\" } : { borderLeft: \"10px solid #FF5473\" };\r\n        case \"Gifts & Donations\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #927959\" } : { borderLeft: \"10px solid #927959\" };\r\n        case \"Bills & Utilities\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #7E0332\" } : { borderLeft: \"10px solid #7E0332\" };\r\n        case \"Others\":\r\n            return name === \"card\" ? { borderBottom: \"5px solid #872AEF\" } : { borderLeft: \"10px solid #872AEF\" };\r\n        default:\r\n            return { borderBottom: \"5px solid orange\" };\r\n    }\r\n};\r\n\r\nexport const categoryIcon = category => {\r\n    switch (category) {\r\n        case \"Food\":\r\n            return \"cutlery\";\r\n        case \"Automobile\":\r\n            return \"motorcycle\";\r\n        case \"Entertainment\":\r\n            return \"film\";\r\n        case \"Clothing\":\r\n            return \"shopping-bag\";\r\n        case \"Healthcare\":\r\n            return \"medkit\";\r\n        case \"Travel\":\r\n            return \"plane\";\r\n        case \"Shopping\":\r\n            return \"shopping-cart\";\r\n        case \"Personal Care\":\r\n            return \"user-md\";\r\n        case \"Investment\":\r\n            return \"get-pocket\";\r\n        case \"Gifts & Donations\":\r\n            return \"gift\";\r\n        case \"Bills & Utilities\":\r\n            return \"columns\";\r\n        case \"Others\":\r\n            return \"circle-o\";\r\n        default:\r\n            return \"bars\";\r\n    }\r\n};\r\n\r\nexport const getCatColor = category => {\r\n    switch (category) {\r\n        case \"Food\":\r\n            return \"#FF965D\";\r\n        case \"Automobile\":\r\n            return \"#FFCC78\";\r\n        case \"Entertainment\":\r\n            return \"#A08E78\";\r\n        case \"Clothing\":\r\n            return \"#8DA685\";\r\n        case \"Healthcare\":\r\n            return \"#00A3EA\";\r\n        case \"Travel\":\r\n            return \"#3EA75E\";\r\n        case \"Shopping\":\r\n            return \"#16B498\";\r\n        case \"Personal Care\":\r\n            return \"#FF1945\";\r\n        case \"Investment\":\r\n            return \"#FF5473\";\r\n        case \"Gifts & Donations\":\r\n            return \"#927959\";\r\n        case \"Bills & Utilities\":\r\n            return \"#7E0332\";\r\n        case \"Others\":\r\n            return \"#872AEF\";\r\n        default:\r\n            return \"#fff\";\r\n    }\r\n};\r\n\r\nexport const setCurrencyIcon = currency => {\r\n    switch (currency) {\r\n        case \"Indian Rupees\":\r\n            return \"fa-rupee\";\r\n        case \"US Dollars\":\r\n            return \"fa-dollar\";\r\n        case \"Pounds\":\r\n            return \"fa-gbp\";\r\n        case \"Yen\":\r\n            return \"fa-yen\";\r\n        case \"Euro\":\r\n            return \"fa-euro\";\r\n        default:\r\n            return \"fa-rupee\";\r\n    }\r\n};\r\n\r\nexport const filterExpensesByCriteria = (startDate, endDate, category, expenseFrom, expenseTo, thisUsersExpenses) => {\r\n    var start = new Date(startDate);\r\n    var end = new Date(endDate);\r\n    var currentDate = new Date(start);\r\n    var between = [];\r\n    var filteredExpenses = [];\r\n\r\n    while (currentDate <= end) {\r\n        between.push(moment(new Date(currentDate)).format(\"MM/DD/YYYY\"));\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    between.forEach(function (elem) {\r\n        return thisUsersExpenses.filter(function (el) {\r\n            return elem === el.value.date ? filteredExpenses.push(el) : \"\";\r\n        });\r\n    });\r\n\r\n    filteredExpenses = filteredExpenses\r\n        .filter(elem => {\r\n            return elem.value.category === category;\r\n        })\r\n        .filter(elem => {\r\n            return Number(elem.value.expense) >= Number(expenseFrom) && Number(elem.value.expense) <= Number(expenseTo);\r\n        });\r\n\r\n    return filteredExpenses;\r\n};\r\n\r\n// Total loan amount that you need to pay or get paid\r\nexport const loanTakenOrGivenAmt = (thisUsersLoans, takenOrGiven) => {\r\n    if (thisUsersLoans.length && takenOrGiven) {\r\n        let loans = thisUsersLoans.filter(\r\n            elem => elem.value.loanType === takenOrGiven && elem.value.status === \"Pending\"\r\n        );\r\n\r\n        return loans.length ? loans.map(elem => Number(elem.value.amount)).reduce((prev, cur) => prev + cur) : 0;\r\n    } else {\r\n        return 0;\r\n    }\r\n};\r\n\r\n// get all the dates of a particular week\r\n/*const today = moment();\r\n        const sevenDaysBefore = moment().subtract(7, 'days');\r\n        console.log(today)\r\n        console.log(sevenDaysBefore)*/\r\n\r\n\r\n// get all the dates of a particular monthly\r\n\r\nexport const getAllTheDatesInAMonth = (selectedYear, selectedMonth) => {\r\n    //var date = new Date(), y = date.getFullYear(), m = date.getMonth();\r\n    var firstDay = new Date(Number(selectedYear), Number(selectedMonth), 1);\r\n    var lastDay = new Date(Number(selectedYear), Number(selectedMonth) + 1, 0);\r\n\r\n    firstDay = moment(firstDay).format(\"MM/DD/YYYY\");\r\n    lastDay = moment(lastDay).format(\"MM/DD/YYYY\");\r\n\r\n    // Returns an array of dates between the two dates\r\n    var getDates = function (startDate, endDate) {\r\n        var dates = [],\r\n            currentDate = startDate,\r\n            addDays = function (days) {\r\n                var date = new Date(this.valueOf());\r\n                date.setDate(date.getDate() + days);\r\n                return date;\r\n            };\r\n        while (currentDate <= endDate) {\r\n            dates.push(currentDate);\r\n            currentDate = addDays.call(currentDate, 1);\r\n        }\r\n        return dates.map(date => moment(date).format(\"MM/DD/YYYY\"));\r\n    };\r\n\r\n    // Usage\r\n    var dates = getDates(new Date(firstDay), new Date(lastDay));\r\n    //var datesinSelectedMonth = [];\r\n    //dates.map(function (date) {\r\n    //datesinSelectedMonth.push(moment(date).format(\"MM/DD/YYYY\"));\r\n    //});\r\n\r\n    return dates;\r\n};\r\n\r\n// previous 3 and next 3 years\r\nexport const yearsGenereator = () => {\r\n    var defaultYears = [];\r\n    var dateVal = new Date();\r\n    var currentYear = dateVal.getFullYear();\r\n    var cutOffYears = 4; // using 5 years as cutoff as per reports cutoffyears to keep inline\r\n    for (var i = currentYear - cutOffYears; i <= currentYear + cutOffYears; i++) {\r\n        defaultYears.push(i);\r\n    }\r\n\r\n    return defaultYears;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}