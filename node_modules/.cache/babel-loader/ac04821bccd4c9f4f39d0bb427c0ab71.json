{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Projects\\\\my-app\\\\src\\\\pages\\\\History.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useHistory } from \"react-router\";\nimport { auth, db, app, CurrentUser } from \"../firebase\";\nimport * as utils from \"../Util\";\nimport Transaction from './Transaction';\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction History() {\n  _s();\n\n  const [user, loading, error] = useAuthState(auth);\n  const [history_, setHistory_] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    const fetchUserName = async () => {\n      try {\n        const query = await db.collection(\"users\").where(\"uid\", \"==\", user === null || user === void 0 ? void 0 : user.uid).get();\n        const data = await query.docs[0].data();\n      } catch (err) {\n        console.error(err);\n        alert(\"An error occured while fetching user data\");\n      }\n    };\n\n    if (loading) return;\n    if (!user) return history.replace(\"/\");\n    app.database().ref('Transactions/' + (user === null || user === void 0 ? void 0 : user.uid)).on(\"value\", data => {\n      console.log(data.val());\n\n      if (data.val() !== null) {\n        const eachExpense = utils.eachExpense(data.val());\n        const thisUsersExpenses = utils.currentUsersExpenses(eachExpense, user);\n        setHistory_(thisUsersExpenses);\n      }\n    });\n    fetchUserName();\n  }, [user, loading, history]);\n  return (\n    /*#__PURE__*/\n    //     <div className=\"latestTransactions\">\n    //     <p>Latest Transactions</p>\n    //     <ul>\n    //         {\n    //             Object.keys(history_).map((id) => (\n    //                 <Transaction key={id}\n    //                     type={history_[id].value.type}\n    //                     name={history_[id].value.name}\n    //                     price={history_[id].value.price}\n    //                 />\n    //             ))\n    //         }\n    //     </ul>\n    // </div>\n    _jsxDEV(\"div\", {\n      style: {\n        height: 400,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: [Object.keys(history_).map(id => ({\n          id: id,\n          name: history_[id].value.name,\n          price: history_[id].value.price,\n          date: history_[id].value.date,\n          type: history_[id].value.type\n        }))][0],\n        columns: columns,\n        pageSize: 5,\n        rowsPerPageOptions: [5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(History, \"L1Zu4oe0BqFMODUyo2+boUiZFt4=\", false, function () {\n  return [useAuthState, useHistory];\n});\n\n_c = History;\nexport default History;\n\nvar _c;\n\n$RefreshReg$(_c, \"History\");","map":{"version":3,"sources":["D:/React Projects/my-app/src/pages/History.js"],"names":["React","Component","useState","useEffect","useAuthState","useHistory","auth","db","app","CurrentUser","utils","Transaction","DataGrid","History","user","loading","error","history_","setHistory_","history","fetchUserName","query","collection","where","uid","get","data","docs","err","console","alert","replace","database","ref","on","log","val","eachExpense","thisUsersExpenses","currentUsersExpenses","height","width","Object","keys","map","id","name","value","price","date","type","columns"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { useHistory } from \"react-router\";\r\nimport { auth, db,app,CurrentUser } from \"../firebase\";\r\nimport * as utils from \"../Util\";\r\nimport Transaction from './Transaction';\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\n\r\nfunction History() {\r\n    const [user, loading, error] = useAuthState(auth);\r\n    const [history_, setHistory_] = useState([]);\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n    \r\n        const fetchUserName = async () => {\r\n          try {\r\n            const query = await db\r\n              .collection(\"users\")\r\n              .where(\"uid\", \"==\", user?.uid)\r\n              .get();\r\n            const data = await query.docs[0].data();\r\n            \r\n            \r\n          } catch (err) {\r\n            console.error(err);\r\n            alert(\"An error occured while fetching user data\");\r\n          }\r\n        };\r\n        if (loading) return;\r\n        if (!user) return history.replace(\"/\");\r\n        \r\n\r\n        app.database().ref('Transactions/' + user?.uid).on(\"value\", data => {\r\n            console.log(data.val());\r\n            if(data.val() !== null)\r\n            {\r\n            const eachExpense = utils.eachExpense(data.val());\r\n            const thisUsersExpenses = utils.currentUsersExpenses(eachExpense, user);\r\n            \r\n            setHistory_(thisUsersExpenses);\r\n            \r\n           }\r\n          });\r\n\r\n        fetchUserName();\r\n      }, [user, loading,\r\n        history]);\r\n\r\n        \r\n  return (\r\n    //     <div className=\"latestTransactions\">\r\n    //     <p>Latest Transactions</p>\r\n    //     <ul>\r\n    //         {\r\n                \r\n    //             Object.keys(history_).map((id) => (\r\n    //                 <Transaction key={id}\r\n    //                     type={history_[id].value.type}\r\n    //                     name={history_[id].value.name}\r\n    //                     price={history_[id].value.price}\r\n    //                 />\r\n    //             ))\r\n    //         }\r\n    //     </ul>\r\n    // </div>\r\n    <div style={{ height: 400, width: '100%' }}>\r\n      <DataGrid\r\n        rows={\r\n            [Object.keys(history_).map((id) => (\r\n              {\r\n                  id: id,\r\n                  name: history_[id].value.name,\r\n                  price: history_[id].value.price,\r\n                  date: history_[id].value.date,\r\n                  type: history_[id].value.type,\r\n              }\r\n          ))][0]\r\n        }\r\n        columns={columns}\r\n        pageSize={5}\r\n        rowsPerPageOptions={[5]}\r\n      />\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default History;"]},"metadata":{},"sourceType":"module"}